/*
 * generated by Xtext 2.10.0
 */
package com.fun.gantt.example.serializer;

import com.fun.gantt.example.sMDSL.Activity;
import com.fun.gantt.example.sMDSL.Dependency;
import com.fun.gantt.example.sMDSL.SMDSLPackage;
import com.fun.gantt.example.services.SMDSLGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SMDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SMDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SMDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SMDSLPackage.ACTIVITY:
				sequence_Activity(context, (Activity) semanticObject); 
				return; 
			case SMDSLPackage.DEPENDENCY:
				sequence_Dependency(context, (Dependency) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Entry returns Activity
	 *     Activity returns Activity
	 *
	 * Constraint:
	 *     (name=ID contents+=Entry*)
	 */
	protected void sequence_Activity(ISerializationContext context, Activity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entry returns Dependency
	 *     Dependency returns Dependency
	 *
	 * Constraint:
	 *     to=[Activity|ID]
	 */
	protected void sequence_Dependency(ISerializationContext context, Dependency semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SMDSLPackage.Literals.DEPENDENCY__TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SMDSLPackage.Literals.DEPENDENCY__TO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDependencyAccess().getToActivityIDTerminalRuleCall_2_0_1(), semanticObject.getTo());
		feeder.finish();
	}
	
	
}
